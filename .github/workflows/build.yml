name: "Build"

on:
  push:
    paths-ignore:
      - "**.md"
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

env:
  NODE_ENV: development

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
      - name: Install dependencies
        working-directory: ./client
        run: nix develop --command make install
      - name: Build project
        working-directory: ./client
        run: nix develop --command make build

  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: ./.github/actions/setup-integration-tests
      - name: Create KeyHippo schema and extensions
        working-directory: ./client
        run: |
          cat << EOF > create_schema.sql
          CREATE EXTENSION IF NOT EXISTS pgcrypto;
          CREATE EXTENSION IF NOT EXISTS pgjwt;
          CREATE SCHEMA IF NOT EXISTS keyhippo;
          EOF

          PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f create_schema.sql

      - name: Install KeyHippo extension
        working-directory: ./client
        run: |
          for file in $(find ../extension/ -type f -name "keyhippo--*.sql" | sort -V); do
            PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f "$file"
          done

      - uses: ./.github/actions/setup-environment
      - name: Install dependencies
        working-directory: ./client
        run: nix develop --command make install
      - name: Build project
        working-directory: ./client
        run: nix develop --command make build
      - name: Run tests
        working-directory: ./client
        run: nix develop --command make test
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: client/coverage
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
